/* eslint-disable @nx/enforce-module-boundaries */
/**
 * Copyright [2024] [ElhakimDev]
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
import { Component, OnInit, booleanAttribute, contentChildren, inject, input, model } from '@angular/core';

import { CommonModule } from '@angular/common';
import { NgxPrimerAccordionItemComponent } from '../accordion-item/accordion-item.component';
import { NgxPrimerAccordionRootThemeVariantDirective } from '../../directives';
import { injectAccordionConfig } from '../../configs/accordion-config';
import { useIdGenerator } from 'packages/primitives/utilities/src/providers/id-generator/id-generator.provider';

const { injectIdGenerator, provideIdGenerator } = useIdGenerator();

@Component({
  selector: 'ngx-primer-accordion-root',
  standalone: true,
  imports: [
    CommonModule
  ],
  providers: [
    provideIdGenerator({})
  ],
  templateUrl: './accordion-root.component.html',
  styleUrl: './accordion-root.component.scss',
  exportAs: 'ngxPrimerAccordionRootComponent'
})
export class NgxPrimerAccordionRootComponent<T> implements OnInit {
  
  /**
   * The component's utilities dependencies registry.
   * This includes essential services or utilities required by the component.
   * 
   * @type {Object} The registry holding the dependencies used within the component.
   */
  protected readonly dependencies = {
    idGenerator: injectIdGenerator()  // Injecting the ID generator utility for unique component identification.
  }

  /**
   * Reference to the current accordion instance.
   * 
   * @type {NgxPrimerAccordionRootComponent<T>} The component instance.
   */
  public readonly accordion = this;

  /**
   * Get the accordion ID, generated by the injected ID generator.
   * Falls back to a default value if the ID generator is unavailable.
   * 
   * @returns {string} The unique ID for the accordion component.
   */
  public get accordionId() {
    return this.dependencies.idGenerator?.generatedId ?? 'ngx-primer-accordion-root';
  }
  
  /**
   * The accordion configuration instance.
   * This contains configuration values such as the accordion type, collapsibility, etc.
   * 
   * @type {Object} The accordion configuration.
   */
  public readonly accordionConfig = injectAccordionConfig();
  
  /**
   * The list of accordion item instances that belong to this accordion root.
   * 
   * @type {QueryList<NgxPrimerAccordionItemComponent>} The accordion items within this component.
   */
  public readonly accordionItems = contentChildren(NgxPrimerAccordionItemComponent, {
    descendants: true,
    read: NgxPrimerAccordionItemComponent
  });

  /**
   * Reference to the accordion root theme variant directive.
   * Allows access to the theme configuration for the accordion root.
   * 
   * @type {NgxPrimerAccordionRootThemeVariantDirective | null} The theme variant directive or null if not provided.
   */
  public readonly accordionRootThemeVariant = inject(NgxPrimerAccordionRootThemeVariantDirective, {
    self: true,
    optional: true,
    host: true,
  });
  
  /**
   * The accordion type (Single/Multiple).
   * This defines whether the accordion allows single or multiple items to be open at once.
   * 
   * @type {string} The accordion type, either 'Single' or 'Multiple'.
   */
  public readonly type = input(this.accordionConfig.type, {
    alias: 'ngxPrimerAccordionType',
  });
  
  /**
   * The collapsible property for the accordion.
   * Determines whether the accordion can collapse or not.
   * 
   * @type {boolean} True if the accordion is collapsible, false otherwise.
   */
  public readonly collapsible = input<boolean, boolean>(this.accordionConfig.collapsible, {
    alias: 'ngxPrimerAccordionCollapsible',
    transform: booleanAttribute,
  });
  
  /**
   * The currently selected value(s) in the accordion.
   * This represents the values of the open accordion item(s).
   * 
   * @type {T | T[] | null} The currently selected value(s) or null if no item is selected.
   */
  public readonly value = model<T | T[] | null>(null, {
    alias: 'ngxPrimerAccordionValue'
  });
  
  /**
   * The default value for the accordion.
   * This is the initial value to be set if no other value is provided.
   * 
   * @type {T | T[] | null} The default selected value(s).
   */
  public readonly defaultValue = input<T | T[] | null>(null, {
    alias: 'ngxPrimerAccordionDefaultValue'
  });
  
  /**
   * Whether the accordion is disabled or not.
   * If true, the accordion and its items cannot be interacted with.
   * 
   * @type {boolean} True if the accordion is disabled, false otherwise.
   */
  public readonly disabled = input<boolean, boolean>(false, {
    alias: 'ngxPrimerAccordionDisabled',
    transform: booleanAttribute,
  });
  
  /**
   * The orientation of the accordion (e.g., horizontal or vertical).
   * 
   * @type {string} The accordion's orientation.
   */
  public readonly orientation = input(this.accordionConfig.orientation, {
    alias: 'ngxPrimerAccordionOrientation',
  });

  // --------------------------- Method ---------------------------------- //
  
  /**
   * Checks whether the given value is currently open in the accordion.
   * 
   * @param {T} value The value to check.
   * @returns {boolean} True if the value is open, false otherwise.
   */
  public isOpen(value: T): boolean {
    return this.type() === 'Multiple' 
      ? ((this.value() as T[] | null)?.includes(value) ?? false) 
      : this.value() === value;
  }
  
  /**
   * Toggles the open/closed state of a given accordion value.
   * 
   * @param {T} value The value to toggle.
   * @returns {void} This method does not return anything.
   */
  public toggle(value: T): void {
    const isOpenValue = this.isOpen(value);
    
    // Prevent toggle for single-type accordion when collapsible is false and already open.
    if (this.type() === "Single" && isOpenValue && !this.collapsible()) {
      return;
    }

    if (this.type() === "Single") {
      this.value.set(isOpenValue ? null : value); // Set to null for single-value mode.
    }

    const values = (this.value() as T[]) ?? [];

    // Toggle the value in the selected values list.
    if (isOpenValue) {
      this.value.set(values.filter(v => v !== value));  // Remove if currently open.
    } else {
      this.value.set([...values, value]);  // Add if currently closed.
    }
  }

  // --------------------------- Hooks ---------------------------------- //
  
  /**
   * Angular initialization hook.
   * Runs the initialization function when the component is initialized.
   * 
   * @returns {void} This method does not return anything.
   */
  ngOnInit(): void {
    this.runInitializationFn();
  }

  /**
   * Runs the initialization logic for the accordion component.
   * If a default value is provided, it will set the initial value.
   * 
   * @param {Function} [doneFn] Optional callback to run after initialization.
   * @returns {void} This method does not return anything.
   */
  protected runInitializationFn(doneFn?: <P>(args?: P) => void): void {
    if (this.defaultValue()) {
      this.value.set(this.defaultValue()); // Set default value if provided.
    }

    if (doneFn) {
      doneFn(this.value()); // Execute the callback with the current value.
    }
  }
}
